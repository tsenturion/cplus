#include <iostream>
#include <unordered_map>
#include <string>

class AppConfig 
{
public:
    static AppConfig& getInstance() 
    {
        static AppConfig instance;
        return instance;
    }

    void set(const std::string& key, const std::string& value) 
    {
        config_[key] = value;
    }

    std::string get(const std::string& key) const 
    {
        auto it = config_.find(key);
        if (it != config_.end()) 
        {
            return it->second;
        }
        return "";
    }

private:
    AppConfig() = default;
    AppConfig(const AppConfig&) = delete;
    AppConfig& operator=(const AppConfig&) = delete;

    std::unordered_map<std::string, std::string> config_;
};

int main() 
{
    AppConfig& config1 = AppConfig::getInstance();
    AppConfig& config2 = AppConfig::getInstance();

    if (&config1 == &config2) 
    {
        std::cout << "Singleton работает корректно: оба указателя указывают на один и тот же экземпляр." << std::endl;
    } else {
        std::cout << "Ошибка: Singleton работает некорректно." << std::endl;
    }

    config1.set("appName", "My Application");
    config1.set("version", "1.0.0");

    std::cout << "App Name: " << config2.get("appName") << std::endl;
    std::cout << "Version: " << config2.get("version") << std::endl;

    return 0;
}

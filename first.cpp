//банда четырех GoF - 23 паттерна проектирования
/*
код понятнее 
сокращение связанности
легче сопровождать и тестировать
переиспользование
расширяемость, модифицируемость
*/

//порождающие - создание объектов
/*
используется:
    указатели, фабричные функции, делегирование создания, шаблоны

что решает:
    слишком много зависимостей
    жесткая привязка к конкретным классам
    дублирование кода
    отсутствие гибкости при изменении логики создания объектов

когда использовать (причины применения):
    клиентский код зависит от конкретных классов, а не интерфейсов
    создание объектов требует сложной логики
    создание объекта зависит от внешних ресурсов 
    хотим легко подменять реализацию без изменения основного кода
    хотим избежать дублирования логики создания

ооп:
    инверсия управления 
    открытости/закрытости
    снижение связанности
    позднее связывание

5 видов (что решает):
    строитель - создание сложных объектов пошагово
    абстрактная фабрика - создание семейства продуктов, не зависящих друг от друга
    фабричный метод - делегирование выбора типа подклассу
    прототип - клонирование уже существующих объектов
    одиночка (синглтон) - обеспечение одного экземпляра объекта в системе
*/

//создание объектов
/*
когда применять:

*/

//структурные - структурирование кода - композиция классов и объектов
/*
используется:
наследование, шаблоны, интерфейсы

общее:
инкапсуляция структуры 
унификация интерфейсов 
гибкость, расширяемость
снижение связанности
упрощение тестирования и сопровождения

классовые (статические):
объектные (динамические):

адаптер
мост
компоновщик
декоратор
фасад
приспособленец
замесетитель
*/


//поведенческие - работа с объектами, их взаимодействия и управление ими

/*
solid (srp) - принцип единственной ответственности
solid, dry (open/closed) - открыт для расширения, закрыт для модификации


инкапсуляция
композиция

*/
